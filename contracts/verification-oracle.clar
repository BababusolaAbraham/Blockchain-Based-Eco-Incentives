(define-constant ERR-NOT-AUTHORIZED u3000)
(define-constant ERR-NOT-ORACLE u3001)
(define-constant ERR-INVALID-PROOF u3002)
(define-constant ERR-EXPIRED-PERIOD u3003)
(define-constant ERR-INVALID-PARCEL-ID u3004)
(define-constant ERR-INVALID_PERIOD u3005)
(define-constant ERR-INVALID_NDVI_SCORE u3006)
(define-constant ERR-ORACLE-ALREADY-ADDED u3007)
(define-constant ERR-ORACLE-NOT-FOUND u3008)
(define-constant ERR-VERIFICATION-ALREADY_EXISTS u3009)
(define-constant ERR-INVALID-ADMIN u3010)
(define-constant ERR-INVALID-HASH-LENGTH u3011)
(define-constant ERR-MAX-ORACLES-EXCEEDED u3012)
(define-constant ERR-INVALID-SUBMISSION-FEE u3013)
(define-constant ERR-INVALID-REVOCATION u3014)
(define-constant ERR-INVALID-QUERY u3015)
(define-constant ERR-INVALID-STATUS u3016)
(define-constant ERR-INVALID-TIMESTAMP u3017)
(define-constant ERR-INVALID-LOCATION u3018)
(define-constant ERR-INVALID-SATELLITE-SOURCE u3019)
(define-constant ERR-INVALID-CONFIDENCE u3020)

(define-data-var admin principal tx-sender)
(define-data-var next-oracle-id uint u0)
(define-data-var max-oracles uint u50)
(define-data-var submission-fee uint u100)
(define-data-var oracle-registry-contract (optional principal) none)

(define-map oracles uint { address: principal, active: bool, added-at: uint, submissions: uint })
(define-map oracles-by-address principal uint)
(define-map verifications { parcel-id: uint, period: uint } { proof-hash: (buff 32), ndvi-score: uint, submitted-at: uint, oracle: principal, confidence: uint, satellite-source: (string-utf8 50), location-hash: (buff 32), status: bool })
(define-map verification-history uint { parcel-id: uint, period: uint, update-timestamp: uint, updater: principal })
(define-map oracle-submissions principal uint)

(define-read-only (get-oracle (id uint))
  (map-get? oracles id)
)

(define-read-only (get-oracle-by-address (address principal))
  (let ((id (map-get? oracles-by-address address)))
    (match id oracle-id (get-oracle oracle-id) none)
  )
)

(define-read-only (get-verification (parcel-id uint) (period uint))
  (map-get? verifications { parcel-id: parcel-id, period: period })
)

(define-read-only (get-verification-history (history-id uint))
  (map-get? verification-history history-id)
)

(define-read-only (get-submission-count (oracle principal))
  (default-to u0 (map-get? oracle-submissions oracle))
)

(define-read-only (is-oracle-active (address principal))
  (let ((oracle (get-oracle-by-address address)))
    (match oracle details (get active details) false)
  )
)

(define-private (validate-parcel-id (id uint))
  (if (> id u0)
    (ok true)
    (err ERR-INVALID-PARCEL-ID)
  )
)

(define-private (validate-period (period uint))
  (if (> period u0)
    (ok true)
    (err ERR-INVALID_PERIOD)
  )
)

(define-private (validate-ndvi-score (score uint))
  (if (and (>= score u0) (<= score u10000))
    (ok true)
    (err ERR-INVALID_NDVI_SCORE)
  )
)

(define-private (validate-proof-hash (hash (buff 32)))
  (if (is-eq (len hash) u32)
    (ok true)
    (err ERR-INVALID-HASH-LENGTH)
  )
)

(define-private (validate-confidence (conf uint))
  (if (and (>= conf u0) (<= conf u100))
    (ok true)
    (err ERR-INVALID-CONFIDENCE)
  )
)

(define-private (validate-satellite-source (source (string-utf8 50)))
  (if (or (is-eq source "Planet") (is-eq source "MODIS") (is-eq source "Sentinel"))
    (ok true)
    (err ERR-INVALID-SATELLITE-SOURCE)
  )
)

(define-private (validate-location-hash (hash (buff 32)))
  (if (is-eq (len hash) u32)
    (ok true)
    (err ERR-INVALID-LOCATION)
  )
)

(define-private (validate-timestamp (ts uint))
  (if (>= ts block-height)
    (ok true)
    (err ERR-INVALID-TIMESTAMP)
  )
)

(define-private (validate-principal (p principal))
  (if (not (is-eq p tx-sender))
    (ok true)
    (err ERR-INVALID-ADMIN)
  )
)

(define-public (set-admin (new-admin principal))
  (begin
    (asserts! (is-eq tx-sender (var-get admin)) (err ERR-NOT-AUTHORIZED))
    (try! (validate-principal new-admin))
    (var-set admin new-admin)
    (ok true)
  )
)

(define-public (set-max-oracles (new-max uint))
  (begin
    (asserts! (is-eq tx-sender (var-get admin)) (err ERR-NOT-AUTHORIZED))
    (asserts! (> new-max u0) (err ERR-INVALID_UPDATE_PARAM))
    (var-set max-oracles new-max)
    (ok true)
  )
)

(define-public (set-submission-fee (new-fee uint))
  (begin
    (asserts! (is-eq tx-sender (var-get admin)) (err ERR-NOT-AUTHORIZED))
    (asserts! (>= new-fee u0) (err ERR-INVALID-SUBMISSION-FEE))
    (var-set submission-fee new-fee)
    (ok true)
  )
)

(define-public (set-oracle-registry-contract (contract-principal principal))
  (begin
    (asserts! (is-eq tx-sender (var-get admin)) (err ERR-NOT-AUTHORIZED))
    (try! (validate-principal contract-principal))
    (var-set oracle-registry-contract (some contract-principal))
    (ok true)
  )
)

(define-public (add-oracle (oracle principal))
  (let (
    (next-id (var-get next-oracle-id))
    (current-max (var-get max-oracles))
  )
    (asserts! (is-eq tx-sender (var-get admin)) (err ERR-NOT-AUTHORIZED))
    (asserts! (< next-id current-max) (err ERR-MAX-ORACLES-EXCEEDED))
    (asserts! (is-none (map-get? oracles-by-address oracle)) (err ERR-ORACLE-ALREADY-ADDED))
    (map-set oracles next-id { address: oracle, active: true, added-at: block-height, submissions: u0 })
    (map-set oracles-by-address oracle next-id)
    (var-set next-oracle-id (+ next-id u1))
    (print { event: "oracle-added", id: next-id, address: oracle })
    (ok next-id)
  )
)

(define-public (remove-oracle (oracle principal))
  (begin
    (asserts! (is-eq tx-sender (var-get admin)) (err ERR-NOT-AUTHORIZED))
    (let ((id (map-get? oracles-by-address oracle)))
      (match id oracle-id
        (begin
          (map-set oracles oracle-id (merge (unwrap-panic (get-oracle oracle-id)) { active: false }))
          (print { event: "oracle-removed", address: oracle })
          (ok true)
        )
        (err ERR-ORACLE-NOT-FOUND)
      )
    )
  )
)

(define-public (submit-proof
  (parcel-id uint)
  (period uint)
  (proof-hash (buff 32))
  (ndvi-score uint)
  (confidence uint)
  (satellite-source (string-utf8 50))
  (location-hash (buff 32))
)
  (let (
    (caller tx-sender)
    (key { parcel-id: parcel-id, period: period })
    (registry (var-get oracle-registry-contract))
  )
    (asserts! (is-oracle-active caller) (err ERR-NOT-ORACLE))
    (try! (validate-parcel-id parcel-id))
    (try! (validate-period period))
    (try! (validate-proof-hash proof-hash))
    (try! (validate-ndvi-score ndvi-score))
    (try! (validate-confidence confidence))
    (try! (validate-satellite-source satellite-source))
    (try! (validate-location-hash location-hash))
    (asserts! (<= period (- block-height u144)) (err ERR-EXPIRED-PERIOD))
    (asserts! (is-none (map-get? verifications key)) (err ERR-VERIFICATION-ALREADY_EXISTS))
    (match registry reg
      (try! (stx-transfer? (var-get submission-fee) caller reg))
      (ok true)
    )
    (map-set verifications key { proof-hash: proof-hash, ndvi-score: ndvi-score, submitted-at: block-height, oracle: caller, confidence: confidence, satellite-source: satellite-source, location-hash: location-hash, status: true })
    (let ((current-subs (get-submission-count caller)))
      (map-set oracle-submissions caller (+ current-subs u1))
    )
    (print { event: "verification-submitted", parcel-id: parcel-id, period: period, ndvi: ndvi-score, confidence: confidence })
    (ok true)
  )
)

(define-public (update-verification-status
  (parcel-id uint)
  (period uint)
  (new-status bool)
)
  (let (
    (key { parcel-id: parcel-id, period: period })
    (verif (map-get? verifications key))
  )
    (asserts! (is-eq tx-sender (var-get admin)) (err ERR-NOT-AUTHORIZED))
    (match verif details
      (begin
        (map-set verifications key (merge details { status: new-status }))
        (print { event: "verification-updated", parcel-id: parcel-id, period: period, status: new-status })
        (ok true)
      )
      (err ERR_GROUP-NOT-FOUND)
    )
  )
)

(define-public (record-verification-history
  (parcel-id uint)
  (period uint)
)
  (let (
    (next-history-id (len (map-keys verification-history)))
  )
    (asserts! (is-eq tx-sender (var-get admin)) (err ERR-NOT-AUTHORIZED))
    (map-set verification-history next-history-id { parcel-id: parcel-id, period: period, update-timestamp: block-height, updater: tx-sender })
    (ok next-history-id)
  )
)

(define-public (get-oracle-count)
  (ok (var-get next-oracle-id))
)